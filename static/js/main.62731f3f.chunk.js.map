{"version":3,"sources":["logo.svg","App.js","serviceWorker.js"],"names":["module","exports","carnet_field","document","querySelector","schedule_dropdown","late_switch","submit_btn","table_body","carnet_regex","RegExp","student_list","serial","addEventListener","carnet","value","schedule","options","selectedIndex","text","late","checked","campo_borrar","test","datetime_string","Date","toLocaleString","push","addStudent","printArray","innerHTML","forEach","element","new_row","createElement","classList","add","horario","ingreso","tarde","new_cell","new_btn","className","innerText","id","event","id_actual","target","pos","splice","appendChild","alert","keyCode","click","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,oFCIvCC,EAAeC,SAASC,cAAc,iBACtCC,EAAoBF,SAASC,cAAc,mBAC3CE,EAAcH,SAASC,cAAc,gBACrCG,EAAaJ,SAASC,cAAc,eAKpCI,EAAaL,SAASC,cAAc,eACpCK,EAAc,IAAIC,OAAO,cAEzBC,EAAe,GACfC,EAAS,EAiFbL,EAAWM,iBAAiB,SAAS,WACrC,IAAIC,EAASZ,EAAaa,MACtBC,EAAWX,EAAkBY,QAAQZ,EAAkBa,eAAeC,KACtEC,EAAuBd,EAAYe,QAZhC,YAEA,WAWHC,EAAe,GAEhBb,EAAac,KAAKT,KAnCJ,SAACA,EAAQE,EAAUI,GACpC,IACII,GADW,IAAIC,MACYC,iBAE/Bf,EAAagB,KAAK,CAClB,GAAMf,EACN,OAAUE,EACV,QAAWE,EACX,MAASI,EACT,QAAWI,IAEXZ,IAyBAgB,CAAWd,EAAQE,EAAUI,GAtFZ,SAAbS,IACJrB,EAAWsB,UAAU,GAErBnB,EAAaoB,SAAQ,SAAAC,GACrB,IAAIC,EAAU9B,SAAS+B,cAAc,MACrCD,EAAQE,UAAUC,IAAI,gBACtBH,EAAQH,UAAR,0BACmBE,EAAQlB,OAD3B,sBAEMkB,EAAQK,QAFd,sBAGML,EAAQM,QAHd,sBAIMN,EAAQO,MAJd,SAMA,IAAIC,EAAWrC,SAAS+B,cAAc,MAClCO,EAAStC,SAAS+B,cAAc,UAOpCO,EAAQC,UAAY,iBACpBD,EAAQE,UAAY,SACpBF,EAAQ1B,MAAQiB,EAAQY,GAGxBH,EAAQ5B,iBAAiB,SAAS,SAAAgC,GAClC,IAAIC,EAAYD,EAAME,OAAOhC,MAE7BJ,EAAaoB,SAAQ,SAACC,EAASgB,GAC5BF,GAAad,EAAQY,KAEhBjC,EAAasC,OAAOD,EAAI,GACxBnB,WAMRW,EAASU,YAAYT,GACrBR,EAAQiB,YAAYV,GAEpBhC,EAAW0C,YAAYjB,MA8CvBJ,GAGoB,KADpBP,EAAepB,KAEXoB,EAAaP,MAAQ,KAIzBoC,MAAM,qCAQNjD,EAAaW,iBAAiB,SAAS,SAACgC,GACxC,IAAIO,EAAUP,EAAMO,QACPlD,EAAaa,MAEZ,IAAXqC,GACH7C,EAAW8C,WClHSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA+GA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.62731f3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nlet carnet_field = document.querySelector(\"#carnet_field\")\nlet schedule_dropdown = document.querySelector(\"#schedule_field\")\nlet late_switch = document.querySelector(\"#late_switch\")\nlet submit_btn = document.querySelector(\"#submit_btn\")\n\n\n\n\nlet table_body = document.querySelector(\"#table_body\")\nlet carnet_regex= new RegExp('^[0-9]{8}$')\n\nlet student_list = []\nlet serial = 0\n\nlet printArray = ()=>{\ntable_body.innerHTML=\"\"\n\nstudent_list.forEach(element =>{\nlet new_row = document.createElement(\"tr\")\nnew_row.classList.add(\"table-active\")\nnew_row.innerHTML =\n`<th scope='row'>${element.carnet}</th>\n<td>${element.horario}</td>\n<td>${element.ingreso}</td>\n<td>${element.tarde}</td>`\n\nlet new_cell = document.createElement(\"td\")\nlet new_btn= document.createElement(\"button\")\n\n\n\n/**\n* Personalización del botón\n*/\nnew_btn.className = \"btn btn-danger\"\nnew_btn.innerText = \"Borrar\"\nnew_btn.value = element.id;\n\n\nnew_btn.addEventListener(\"click\", event =>{\nlet id_actual = event.target.value\n\nstudent_list.forEach((element, pos)=>{\nif(id_actual == element.id){\n\n        student_list.splice(pos,1)\n        printArray()  \n}\n})\n})\n\n\nnew_cell.appendChild(new_btn)\nnew_row.appendChild(new_cell)\n\ntable_body.appendChild(new_row)\n\n})\n}\n\n/*\nFunción para agregar un hijo a la tabla\n*/\n\nlet addStudent = (carnet, schedule, late)=>{\nlet datetime = new Date()\nlet datetime_string = datetime.toLocaleString()\n\nstudent_list.push({\n\"id\": serial,\n\"carnet\": carnet,\n\"horario\": schedule,\n\"tarde\": late,\n\"ingreso\": datetime_string\n})\nserial++\n}\n\n/*\nFunción para parsear el valor booleano del late_switch\n*/\n\nlet parseLateSwitch= (value)=>{\nif(value){\nreturn \"Tardisimo\"\n}\nreturn \"A tiempo\"\n}\n\n/*\nListener para detectar el click en el boton\n*/\n\nsubmit_btn.addEventListener(\"click\", ()=>{\nlet carnet = carnet_field.value\nlet schedule = schedule_dropdown.options[schedule_dropdown.selectedIndex].text\nlet late = parseLateSwitch(late_switch.checked)\nlet campo_borrar = \"\";\n\nif(carnet_regex.test(carnet)){    \naddStudent(carnet, schedule, late)\nprintArray()\n\ncampo_borrar = carnet_field;\nif (campo_borrar != \"\") {\n    campo_borrar.value = \"\";\n}\n\n}else{\nalert(\"Formato de carnet no válido\")\n}\n})\n\n/*\nListener para disparar el botón cuando se aprete enter\n*/\n\ncarnet_field.addEventListener(\"keyup\", (event)=>{\nlet keyCode = event.keyCode\nlet carnet = carnet_field.value\n\nif(keyCode == 13){\nsubmit_btn.click()\n}\n\n\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}